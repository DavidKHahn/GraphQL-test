{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"0oCAGA,IAAMA,EAAgBC,YAAHC,KASbC,EAAkBF,YAAHG,KASfC,EAAkBJ,YAAHK,KASfC,EAAeN,YAAHO,KC1BZC,+LACkB,IACRC,EAASC,KAAKC,MAAMC,KAApBH,KACR,OAAGA,EAEKI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKN,EAAKO,MACVH,EAAAC,EAAAC,cAAA,SAAIN,EAAKQ,OACTJ,EAAAC,EAAAC,cAAA,SAAIN,EAAKS,OAAOF,MAChBH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,MAAII,UAAU,eACRV,EAAKS,OAAOE,MAAMC,IAAI,SAAAC,GACpB,OAAOT,EAAAC,EAAAC,cAAA,MAAIQ,IAAMD,EAAKE,IAAMF,EAAKN,UAO7CH,EAAAC,EAAAC,cAAA,mEAMZ,OACAF,EAAAC,EAAAC,cAAA,OAAKS,GAAG,gBACHd,KAAKe,6BA3BYC,aAiCXC,oBAAQrB,EAAc,CACjCsB,QAAS,SAACjB,GACN,MAAO,CACHkB,UAAW,CACPL,GAAIb,EAAMmB,WAJXH,CAQZnB,GCtCGuB,cACJ,SAAAA,EAAYpB,GAAM,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAM,CACTC,SAAS,MAHKP,8EAMF,IAAAQ,EAAA9B,KACRE,EAAOF,KAAKC,MAAMC,KACtB,OAAGA,EAAK6B,QACC5B,EAAAC,EAAAC,cAAA,+BAEAH,EAAKQ,MAAMC,IAAI,SAAAZ,GACpB,OACEI,EAAAC,EAAAC,cAAA,MAAIQ,IAAKd,EAAKe,GAAIkB,QAAS,SAACC,GAAMH,EAAKI,SAAS,CAACL,SAAS9B,EAAKe,OAAQf,EAAKO,yCAMpF,OACAH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIS,GAAG,aACDd,KAAKmC,gBAEXhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAahB,OAAQpB,KAAK4B,MAAMC,mBAzBjBb,aA+BRC,oBAAQ5B,EAAR4B,CAAuBI,GClChCgB,cACF,SAAAA,EAAYpC,GAAM,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqC,IACdf,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAc,GAAAV,KAAA3B,KAAMC,KACD2B,MAAM,CACPtB,KAAM,GACNC,MAAO,GACP+B,SAAU,IALAhB,gFAUd,IAAIpB,EAAKF,KAAKC,MAAMT,gBACpB,OAAGU,EAAK6B,QACI5B,EAAAC,EAAAC,cAAA,UAAQkC,UAAQ,GAAhB,qBAEDrC,EAAKsC,QAAQ7B,IAAI,SAAAH,GACpB,OAAOL,EAAAC,EAAAC,cAAA,UAAQQ,IAAML,EAAOM,GAAK2B,MAAQjC,EAAOM,IAAzC,IAAgDN,EAAOF,KAAvD,0CAIR2B,GACPA,EAAES,iBACF1C,KAAKC,MAAMP,gBAAgB,CACvByB,UAAW,CACPb,KAAMN,KAAK4B,MAAMtB,KACjBC,MAAOP,KAAK4B,MAAMrB,MAClB+B,SAAUtC,KAAK4B,MAAMU,UAGzBK,eAAgB,CAAC,CAAEC,MAAOvD,uCAIzB,IAAAyC,EAAA9B,KACL,OACIG,EAAAC,EAAAC,cAAA,QAAMS,GAAG,WAAW+B,SAAU7C,KAAK8C,WAAWC,KAAK/C,OAE/CG,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOC,SAAU,SAAChB,GAAD,OAAOH,EAAKI,SAAS,CAAC5B,KAAM2B,EAAEiB,OAAOT,YAGtEtC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOC,SAAU,SAAChB,GAAD,OAAOH,EAAKI,SAAS,CAAC3B,MAAO0B,EAAEiB,OAAOT,YAGvEtC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAQ4C,SAAU,SAAChB,GAAD,OAAOH,EAAKI,SAAS,CAACI,SAAUL,EAAEiB,OAAOT,UACvDtC,EAAAC,EAAAC,cAAA,+BACEL,KAAKmD,mBAIfhD,EAAAC,EAAAC,cAAA,2BAvDMW,aA8DPoC,oBACXnC,kBAAQzB,EAAiB,CAAEc,KAAM,oBACjCW,kBAAQvB,EAAiB,CAAEY,KAAM,oBAFtB8C,CAGbf,GC5DIgB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAiBQC,mLAZX,OACErD,EAAAC,EAAAC,cAACoD,EAAA,eAAD,CAAgBJ,OAAQA,GACtBlD,EAAAC,EAAAC,cAAA,OAAKS,GAAG,QACRX,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,eAPU3C,aCRlB4C,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.28def100.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n//externalize queries in separate file\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n  `\n\nconst getAuthorsQuery = gql`\n    {\n        authors {\n        name\n        id\n        }\n    }\n  `\n// $ represents query variable, ! represents not null (required)\nconst addBookMutation = gql`\n    mutation ($name: String!, $genre: String!, $authorId: ID!) {\n        addBook(name: $name, genre: $genre, authorId: $authorId){\n            name\n            id\n        }\n    }\n`\n\nconst getBookQuery = gql`\n    query($id: ID){\n        book(id: $id){\n            id\n            name\n            genre\n            author{\n                id\n                name\n                age\n                books{\n                    name\n                    id\n                }\n            }\n        }\n    }\n`\n\n  export { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\nclass BookDetails extends Component {\n    displayBookDetails(){\n        const { book } = this.props.data;\n        if(book){\n            return(\n                <div>\n                    <h2>{book.name}</h2>\n                    <p>{book.genre}</p>\n                    <p>{book.author.name}</p>\n                    <p>All books by this author:</p>\n                    <ul className=\"other-books\">\n                        { book.author.books.map(item => {\n                            return <li key={ item.id }>{item.name}</li>\n                        })}\n                    </ul>\n                </div>\n            )\n        } else {\n            return(\n                <div>No book selected...</div>\n            )\n        }\n    }\n    render() {\n    \n    return (\n    <div id=\"book-details\">\n        {this.displayBookDetails()}\n    </div>\n    );\n  }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBooksQuery } from '../queries/queries'\n\n// Components\nimport BookDetails from './BookDetails';\n\nclass BookList extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      selected:null\n    }\n  }\n    displayBooks(){\n      var data = this.props.data;\n      if(data.loading){\n        return(<div>Loading books...</div>)\n      } else {\n        return data.books.map(book => {\n          return(\n            <li key={book.id} onClick={(e)=> {this.setState({selected:book.id})}}>{book.name}</li>\n          );\n        })\n      }\n    }\n    render() {\n    return (\n    <div>\n        <ul id=\"book-list\">\n            { this.displayBooks() }\n        </ul>\n        <BookDetails bookId={this.state.selected} />\n    </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../queries/queries'\n\nclass AddBook extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            name: '',\n            genre: '',\n            authorId: ''\n        }\n    }\n\n    displayAuthors(){ // creates author list in select box\n        var data=this.props.getAuthorsQuery;\n        if(data.loading){\n            return( <option disabled>Loading Authors..</option>);\n        } else {\n            return data.authors.map(author => {\n                return(<option key={ author.id } value={ author.id }> {author.name} </option>)\n            })\n        }\n    }\n    submitForm(e){\n        e.preventDefault();\n        this.props.addBookMutation({\n            variables: { // sets value of state given at the time\n                name: this.state.name,\n                genre: this.state.genre,\n                authorId: this.state.authorId\n            },\n            // refetches data and automatically updates list\n            refetchQueries: [{ query: getBooksQuery }]\n        });\n    }\n\n    render() {\n        return (\n            <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n\n                <div className=\"field\">\n                    <label>Book name:</label>\n                    <input type=\"text\" onChange={(e) => this.setState({name: e.target.value})}/>\n                </div>\n\n                <div className=\"field\">\n                    <label>Genre:</label>\n                    <input type=\"text\" onChange={(e) => this.setState({genre: e.target.value})}/>\n                </div>\n\n                <div className=\"field\">\n                    <label>Author:</label>\n                    <select onChange={(e) => this.setState({authorId: e.target.value})}>\n                        <option>Select author</option>\n                        { this.displayAuthors() }\n                    </select>\n                </div>\n\n                <button>+</button>\n\n            </form>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n    graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook);\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// Components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\n// Apollo client setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n        <h1>Reading List</h1>\n        <BookList/>\n        <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}